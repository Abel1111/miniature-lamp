---
name: Windows RustDesk Remote Access (Portable EXE)

on:
  workflow_dispatch:

jobs:
  setup-remote-access:
    runs-on: windows-latest

    steps:
    - name: Download RustDesk Portable Executable
      run: |
        # --- IMPORTANT: VERIFY THIS URL AND FILENAME ---
        # Go to https://github.com/rustdesk/rustdesk/releases
        # Find the release for v1.4.0.
        # Under "Assets", locate: rustdesk-1.4.0-x86_64.exe
        # This is treated as a portable executable that runs directly.

        $RUSTDESK_VERSION = "1.4.0" # Updated version
        $EXE_FILENAME = "rustdesk-${RUSTDESK_VERSION}-x86_64.exe" # Portable EXE filename
        # Note: The URL for 1.4.0 has no 'v' prefix before the version number.
        $DOWNLOAD_URL = "https://github.com/rustdesk/rustdesk/releases/download/${RUSTDESK_VERSION}/${EXE_FILENAME}"

        $DOWNLOAD_PATH = "${env:TEMP}\${EXE_FILENAME}" # Path to download the portable EXE

        echo "Downloading RustDesk portable executable from: $DOWNLOAD_URL"
        # Using curl.exe with retries for robust download
        $MAX_RETRIES = 5
        $RETRY_DELAY = 10 # seconds

        for ($i = 0; $i -lt $MAX_RETRIES; $i++) {
            try {
                echo "Attempt $($i + 1) of $MAX_RETRIES: Downloading $DOWNLOAD_URL"
                curl.exe -L -o "$DOWNLOAD_PATH" "$DOWNLOAD_URL"
                if ($LASTEXITCODE -eq 0) {
                    echo "Download successful."
                    break
                } else {
                    throw "curl.exe failed with exit code $LASTEXITCODE"
                }
            } catch {
                echo "Download failed: $_"
                if ($i -lt ($MAX_RETRIES - 1)) {
                    echo "Retrying in $RETRY_DELAY seconds..."
                    Start-Sleep -Seconds $RETRY_DELAY
                } else {
                    echo "Max retries reached. Exiting."
                    exit 1 # Fail the step
                }
            }
        }

        echo "RustDesk portable executable downloaded to: $DOWNLOAD_PATH"
        # No extraction or installation needed, it runs directly.
      shell: powershell

    - name: Start RustDesk and Get Connection Info
      run: |
        $RUSTDESK_EXE = "${env:TEMP}\rustdesk-${env:RUSTDESK_VERSION}-x86_64.exe" # Path to the downloaded portable EXE
        # Ensure the RUSTDESK_VERSION variable is available from the previous step, or define it here if needed.
        # For simplicity, let's redefine it to ensure it's available in this step's scope
        $RUSTDESK_VERSION = "1.4.0"
        $RUSTDESK_EXE = "${env:TEMP}\rustdesk-${RUSTDESK_VERSION}-x86_64.exe"


        if (-not (Test-Path $RUSTDESK_EXE)) {
            echo "Error: RustDesk executable not found at $RUSTDESK_EXE. Aborting."
            exit 1 # Fail if the executable isn't where it's expected
        }

        echo "Starting RustDesk..."
        # Start RustDesk in the background as a service to ensure it runs headless.
        # The '--logfile' argument might direct logs to the current directory or APPDATA.
        # RustDesk typically defaults to putting config/logs in %APPDATA%\RustDesk regardless.
        Start-Process -FilePath $RUSTDESK_EXE -ArgumentList "--service", "--enable-service" -NoNewWindow -PassThru | Out-Null
        Start-Sleep -Seconds 30 # Give RustDesk time to initialize and generate ID/password

        echo "Attempting to retrieve RustDesk ID and Password from log file or configuration..."
        $APPDATA_RUSTDESK_PATH = "$env:APPDATA\RustDesk"
        $RUSTDESK_LOG_DIR = "$APPDATA_RUSTDESK_PATH\log"
        $RUSTDESK_CONFIG_FILE = "$APPDATA_RUSTDESK_PATH\config\RustDesk.toml"

        echo "Checking RustDesk APPDATA path: $APPDATA_RUSTDESK_PATH"
        if (Test-Path $APPDATA_RUSTDESK_PATH) {
            echo "Listing files in $APPDATA_RUSTDESK_PATH:"
            Get-ChildItem $APPDATA_RUSTDESK_PATH -Recurse | Select-Object FullName

            $recentLogFile = Get-ChildItem $RUSTDESK_LOG_DIR -Filter "*.log" | Sort-Object LastWriteTime -Descending | Select-Object -First 1

            if ($recentLogFile) {
                echo "--- Content of latest RustDesk log file ($($recentLogFile.FullName)) ---"
                $logContent = Get-Content $recentLogFile.FullName -Raw
                echo $logContent
                echo "------------------------------------"

                $rustdeskId = [regex]::Match($logContent, 'ID: (\d+)').Groups[1].Value
                $rustdeskPass = [regex]::Match($logContent, 'Password: (\w+)').Groups[1].Value

                if (-not [string]::IsNullOrEmpty($rustdeskId)) {
                    echo "RustDesk ID: $rustdeskId"
                    echo "RustDesk Password (check logs above or retrieve manually): $rustdeskPass" # Display for debug
                } else {
                    echo "Could not find RustDesk ID in log file. Manual retrieval is likely required."
                }
            } else {
                echo "No recent log files found in $RUSTDESK_LOG_DIR. Manual retrieval of ID/Password is required."
            }
        } else {
            echo "RustDesk APPDATA directory not found. Manual retrieval of ID/Password is required."
        }

        echo "--- Manual Connection Details ---"
        echo "Connect using the RustDesk client on your local machine."
        echo "You will need the RustDesk ID and Password. Look for them in the RustDesk UI after it starts on the runner,"
        echo "or within its configuration/log files (typically in %APPDATA%\RustDesk), or use an SSH session to the runner to view them."
        echo "---------------------------------"

        echo "Keeping runner alive for 30 minutes..."
        timeout /t 1800 /nobreak
      shell: powershell
