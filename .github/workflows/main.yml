---
name: Windows RustDesk Remote Access (Portable EXE)

on:
  workflow_dispatch:

jobs:
  setup-remote-access:
    runs-on: windows-latest

    steps:
    - name: Download RustDesk Portable Executable
      run: |
        # --- IMPORTANT: VERIFY THIS URL AND FILENAME ---
        # Go to https://github.com/rustdesk/rustdesk/releases
        # Find the release for v1.4.0.
        # Under "Assets", locate: rustdesk-1.4.0-x86_64.exe
        # This is treated as a portable executable that runs directly and self-extracts.

        $RUSTDESK_VERSION = "1.4.0" # Updated version
        $EXE_FILENAME = "rustdesk-${RUSTDESK_VERSION}-x86_64.exe" # Portable EXE filename
        $DOWNLOAD_URL = "https://github.com/rustdesk/rustdesk/releases/download/${RUSTDESK_VERSION}/${EXE_FILENAME}"

        $DOWNLOAD_PATH = "${env:TEMP}\${EXE_FILENAME}" # Path to download the portable EXE

        echo "Downloading RustDesk portable executable from: ${DOWNLOAD_URL}"
        $MAX_RETRIES = 5
        $RETRY_DELAY = 10 # seconds

        for ($i = 0; $i -lt $MAX_RETRIES; $i++) {
            try {
                echo ("Attempt $($i + 1) of ${MAX_RETRIES}: Downloading ${DOWNLOAD_URL}")
                curl.exe -L -o "$DOWNLOAD_PATH" "${DOWNLOAD_URL}"
                if ($LASTEXITCODE -eq 0) {
                    echo "Download successful."
                    break
                } else {
                    throw "curl.exe failed with exit code $LASTEXITCODE"
                }
            } catch {
                echo "Download failed: $_"
                if ($i -lt ($MAX_RETRIES - 1)) {
                    echo "Retrying in $RETRY_DELAY seconds..."
                    Start-Sleep -Seconds $RETRY_DELAY
                } else {
                    echo "Max retries reached. Exiting."
                    exit 1 # Fail the step
                }
            }
        }

        echo "RustDesk portable executable downloaded to: ${DOWNLOAD_PATH}"

        # Run the portable EXE briefly to allow it to unpack/self-extract to AppData\Local
        echo "Running RustDesk briefly to allow self-extraction and setup..."
        # Start-Process will run it. We don't need -Wait here if we stop it.
        Start-Process -FilePath "$DOWNLOAD_PATH" -NoNewWindow -PassThru | Out-Null
        Start-Sleep -Seconds 15 # Give it enough time to extract and potentially start its service
        
        # Attempt to stop any running RustDesk processes started from the temp location
        echo "Attempting to stop RustDesk process launched from temp location..."
        Stop-Process -Name "rustdesk" -ErrorAction SilentlyContinue # SilentlyContinue prevents error if not found
        Start-Sleep -Seconds 5 # Give it a moment to terminate
        echo "Initial RustDesk run complete. It should now be set up in AppData\Local."
      shell: powershell

    - name: Start RustDesk and Get Connection Info
      run: |
        # RustDesk (v1.4.0 portable) self-extracts to AppData\Local when first run.
        # We need to target this *actual* persistent executable location.
        $RUSTDESK_EXE = "${env:LOCALAPPDATA}\RustDesk\rustdesk.exe"

        if (-not (Test-Path $RUSTDESK_EXE)) {
            echo "Error: RustDesk executable not found at ${RUSTDESK_EXE} after self-extraction. Aborting."
            echo "Please ensure the initial run of the downloaded EXE successfully extracted it."
            exit 1 # Fail if the executable isn't where it's expected
        }

        echo "Starting RustDesk from its extracted location: ${RUSTDESK_EXE}"
        # Start RustDesk in the background as a service to ensure it runs headless.
        # '--enable-service' and '--service' might manage a Windows service.
        Start-Process -FilePath $RUSTDESK_EXE -ArgumentList "--service", "--enable-service" -NoNewWindow -PassThru | Out-Null
        Start-Sleep -Seconds 30 # Give RustDesk time to initialize and generate ID/password

        echo "Attempting to retrieve RustDesk ID and Password from log file or configuration..."
        $APPDATA_RUSTDESK_PATH = "$env:APPDATA\RustDesk"
        # CRITICAL FIX: Log files are in a 'service' sub-directory for 1.4.0
        $RUSTDESK_LOG_DIR = "$APPDATA_RUSTDESK_PATH\log\service" 
        $RUSTDESK_CONFIG_FILE = "$APPDATA_RUSTDESK_PATH\config\RustDesk.toml" # Still relevant for config

        echo "Checking RustDesk APPDATA path: ${APPDATA_RUSTDESK_PATH}"
        if (Test-Path $APPDATA_RUSTDESK_PATH) {
            # Removed the problematic recursive Get-ChildItem for general listing
            # Instead, directly target the expected log file path.
            echo "Checking log files in: ${RUSTDESK_LOG_DIR}"

            # Try to find recent log file, typically named by date or "rustdesk_rCURRENT.log"
            # Filter specifically for files starting with 'rustdesk_r' as seen in your output
            $recentLogFile = Get-ChildItem $RUSTDESK_LOG_DIR -Filter "rustdesk_r*.log" | Sort-Object LastWriteTime -Descending | Select-Object -First 1

            if ($recentLogFile) {
                echo "--- Content of latest RustDesk service log file ($($recentLogFile.FullName)) ---"
                $logContent = Get-Content $recentLogFile.FullName -Raw
                echo $logContent
                echo "------------------------------------"

                # Attempt to extract ID and Password using regex (adjust regex if needed)
                $rustdeskId = [regex]::Match($logContent, 'ID: (\d+)').Groups[1].Value
                $rustdeskPass = [regex]::Match($logContent, 'Password: (\w+)').Groups[1].Value

                if (-not [string]::IsNullOrEmpty($rustdeskId)) {
                    echo "RustDesk ID: ${rustdeskId}"
                    echo "RustDesk Password (check logs above or retrieve manually): ${rustdeskPass}" # Display for debug
                } else {
                    echo "Could not find RustDesk ID in log file. Manual retrieval is likely required."
                }
            } else {
                echo "No recent log files found in ${RUSTDESK_LOG_DIR}. Manual retrieval of ID/Password is required."
            }
        } else {
            echo "RustDesk APPDATA directory not found. Manual retrieval of ID/Password is required."
        }

        echo "--- Manual Connection Details ---"
        echo "Connect using the RustDesk client on your local machine."
        echo "You will need the RustDesk ID and Password. Look for them in the RustDesk UI after it starts on the runner,"
        echo "or within its configuration/log files (typically in %APPDATA%\RustDesk), or use an SSH session to the runner to view them."
        echo "---------------------------------"

        echo "Keeping runner alive for 30 minutes..."
        timeout /t 1800 /nobreak
      shell: powershell
