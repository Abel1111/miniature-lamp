---
name: Windows RustDesk Remote Access

on:
  workflow_dispatch:

jobs:
  setup-remote-access:
    runs-on: windows-latest # Changed from macos-latest

    steps:
    - name: Download RustDesk Portable
      run: |
        # Define RustDesk version and architecture
        $RUSTDESK_VERSION = "1.2.3" # Adjust if a newer version is desired
        $DMG_FILENAME = "rustdesk-${RUSTDESK_VERSION}-windows-x86_64.zip" # Assuming x86_64 for most runners
        $DOWNLOAD_URL = "https://github.com/rustdesk/rustdesk/releases/download/${RUSTDESK_VERSION}/${DMG_FILENAME}"
        $INSTALL_DIR = "${env:TEMP}\RustDesk" # Using TEMP directory for installation

        echo "Downloading RustDesk from: $DOWNLOAD_URL"
        Invoke-WebRequest -Uri $DOWNLOAD_URL -OutFile "${env:TEMP}\${DMG_FILENAME}"

        echo "Extracting RustDesk to: $INSTALL_DIR"
        Expand-Archive -Path "${env:TEMP}\${DMG_FILENAME}" -DestinationPath $INSTALL_DIR

        # Clean up the downloaded zip file
        Remove-Item "${env:TEMP}\${DMG_FILENAME}"

        echo "RustDesk extracted. Executable path: $INSTALL_DIR\rustdesk.exe"
      shell: powershell # Specify PowerShell for this step

    - name: Start RustDesk and Get Connection Info
      run: |
        $INSTALL_DIR = "${env:TEMP}\RustDesk"
        $RUSTDESK_EXE = "$INSTALL_DIR\rustdesk.exe"
        $LOG_FILE = "$INSTALL_DIR\rustdesk_info.log" # A potential log file to capture output

        echo "Starting RustDesk..."
        # Start RustDesk in the background, redirecting output if possible.
        # RustDesk might directly print ID/password to stdout/stderr or a log file.
        # The `--silent` or `--no-gui` flag might be useful if available for headless use.
        Start-Process -FilePath $RUSTDESK_EXE -ArgumentList "--service", "--enable-service", "--logfile", "$LOG_FILE" -NoNewWindow -PassThru | Out-Null
        # Give RustDesk time to initialize and generate ID/password
        Start-Sleep -Seconds 30

        echo "Attempting to retrieve RustDesk ID and Password from log file or configuration..."
        # This part is highly dependent on how RustDesk exposes its ID/password.
        # On Windows, RustDesk often writes a log or config file in %APPDATA%\RustDesk or the install dir.
        # We'll check the log file we tried to create.

        # ***IMPORTANT: The following commands are illustrative and might not work directly.***
        # You will likely need to inspect the contents of $LOG_FILE or other common RustDesk locations
        # (e.g., %APPDATA%\RustDesk\config\RustDesk.toml or a specific log file in %APPDATA%\RustDesk\log)
        # after a manual run to understand where the ID/password is stored/logged.

        # Example: Try to read from the log file (if RustDesk writes ID/Pass there)
        if (Test-Path $LOG_FILE) {
            $logContent = Get-Content $LOG_FILE -Raw
            echo "--- Content of RustDesk log file ---"
            echo $logContent
            echo "------------------------------------"

            # Attempt to extract ID and Password using regex (adjust regex as needed)
            $rustdeskId = [regex]::Match($logContent, 'ID: (\d+)').Groups[1].Value
            $rustdeskPass = [regex]::Match($logContent, 'Password: (\w+)').Groups[1].Value

            if (-not [string]::IsNullOrEmpty($rustdeskId)) {
                echo "RustDesk ID: $rustdeskId"
                echo "Please find the Password manually if not displayed above or in logs."
                # Outputting password directly in logs is a security risk for public repos.
                # Consider using GitHub Secrets if you need to store and retrieve it securely.
            } else {
                echo "Could not find RustDesk ID in log file. Manual retrieval is likely required."
            }
        } else {
            echo "RustDesk log file not found at $LOG_FILE. Manual retrieval of ID/Password is required."
        }

        echo "--- Manual Connection Details ---"
        echo "Connect using the RustDesk client on your local machine."
        echo "You will need the RustDesk ID and Password. Look for them in the RustDesk UI after it starts on the runner,"
        echo "or within its configuration/log files, or use an SSH session to the runner to view them."
        echo "---------------------------------"

        # Keep alive for 30 minutes
        echo "Keeping runner alive for 30 minutes..."
        timeout /t 1800 /nobreak
      shell: powershell # Specify PowerShell for this step
