---
name: Windows RustDesk Remote Access

on:
  workflow_dispatch:

jobs:
  setup-remote-access:
    runs-on: windows-latest

    steps:
    - name: Download RustDesk Portable
      run: |
        # --- IMPORTANT: VERIFY THIS URL AND FILENAME ON RUSTDESK'S GITHUB RELEASES PAGE ---
        # Go to https://github.com/rustdesk/rustdesk/releases
        # Find the LATEST stable release (e.g., v1.2.6 or newer).
        # Under "Assets", look for the file named like "rustdesk-X.Y.Z-x86_64.zip".
        # This is typically the portable version you want. Copy its direct download link.

        $RUSTDESK_VERSION = "1.2.6" # <<< CHANGED TO A VERSION KNOWN TO HAVE THE PORTABLE ZIP
        $DMG_FILENAME = "rustdesk-${RUSTDESK_VERSION}-x86_64.zip" # <<< VERIFIED FILENAME FOR 1.2.6
        $DOWNLOAD_URL = "https://github.com/rustdesk/rustdesk/releases/download/v${RUSTDESK_VERSION}/${DMG_FILENAME}" # <<< NOTE 'v' prefix in URL

        $INSTALL_DIR = "${env:TEMP}\RustDesk" # Using TEMP directory for installation

        echo "Downloading RustDesk from: $DOWNLOAD_URL"
        Invoke-WebRequest -Uri $DOWNLOAD_URL -OutFile "${env:TEMP}\${DMG_FILENAME}" -UseBasicParsing

        echo "Extracting RustDesk to: $INSTALL_DIR"
        Expand-Archive -Path "${env:TEMP}\${DMG_FILENAME}" -DestinationPath $INSTALL_DIR

        # Clean up the downloaded zip file
        Remove-Item "${env:TEMP}\${DMG_FILENAME}"

        echo "RustDesk extracted. Executable path: $INSTALL_DIR\rustdesk.exe"
      shell: powershell

    - name: Start RustDesk and Get Connection Info
      run: |
        $INSTALL_DIR = "${env:TEMP}\RustDesk"
        $RUSTDESK_EXE = "$INSTALL_DIR\rustdesk.exe"
        $LOG_FILE = "$INSTALL_DIR\rustdesk_info.log"

        echo "Starting RustDesk..."
        # Start RustDesk in the background, attempting to log to a file.
        # Note: RustDesk's CLI arguments might change, verify '--logfile' behavior if issues arise.
        # We start it as a service to try and keep it running reliably.
        Start-Process -FilePath $RUSTDESK_EXE -ArgumentList "--service", "--enable-service", "--logfile", "$LOG_FILE" -NoNewWindow -PassThru | Out-Null
        Start-Sleep -Seconds 30 # Give RustDesk time to initialize

        echo "Attempting to retrieve RustDesk ID and Password from log file or configuration..."
        # On Windows, RustDesk typically stores its config and logs in %APPDATA%\RustDesk
        # It's more reliable to check the actual %APPDATA% path than the install dir for logs/config.
        $APPDATA_RUSTDESK_PATH = "$env:APPDATA\RustDesk"
        $RUSTDESK_LOG_DIR = "$APPDATA_RUSTDESK_PATH\log" # Common log directory
        $RUSTDESK_CONFIG_FILE = "$APPDATA_RUSTDESK_PATH\config\RustDesk.toml" # Common config file

        echo "Checking RustDesk APPDATA path: $APPDATA_RUSTDESK_PATH"
        if (Test-Path $APPDATA_RUSTDESK_PATH) {
            echo "Listing files in $APPDATA_RUSTDESK_PATH:"
            Get-ChildItem $APPDATA_RUSTDESK_PATH -Recurse | Select-Object FullName

            # Try to find recent log file
            $recentLogFile = Get-ChildItem $RUSTDESK_LOG_DIR -Filter "*.log" | Sort-Object LastWriteTime -Descending | Select-Object -First 1

            if ($recentLogFile) {
                echo "--- Content of latest RustDesk log file ($($recentLogFile.FullName)) ---"
                $logContent = Get-Content $recentLogFile.FullName -Raw
                echo $logContent
                echo "------------------------------------"

                # Attempt to extract ID and Password using regex (adjust regex as needed)
                # RustDesk ID is usually numerical, password alphanumeric.
                $rustdeskId = [regex]::Match($logContent, 'ID: (\d+)').Groups[1].Value
                $rustdeskPass = [regex]::Match($logContent, 'Password: (\w+)').Groups[1].Value # Might be generated only on first run

                if (-not [string]::IsNullOrEmpty($rustdeskId)) {
                    echo "RustDesk ID: $rustdeskId"
                    # For security, avoid echoing the password directly in public logs.
                    # If you need it for automated connection, consider GitHub Secrets.
                    echo "RustDesk Password (check logs or retrieve manually): [Hidden for security, if applicable]"
                } else {
                    echo "Could not find RustDesk ID in log file. Manual retrieval is likely required."
                }
            } else {
                echo "No recent log files found in $RUSTDESK_LOG_DIR. Manual retrieval of ID/Password is required."
            }
        } else {
            echo "RustDesk APPDATA directory not found. Manual retrieval of ID/Password is required."
        }

        echo "--- Manual Connection Details ---"
        echo "Connect using the RustDesk client on your local machine."
        echo "You will need the RustDesk ID and Password. Look for them in the RustDesk UI after it starts on the runner,"
        echo "or within its configuration/log files (typically in %APPDATA%\RustDesk), or use an SSH session to the runner to view them."
        echo "---------------------------------"

        # Keep alive for 30 minutes
        echo "Keeping runner alive for 30 minutes..."
        timeout /t 1800 /nobreak
      shell: powershell
